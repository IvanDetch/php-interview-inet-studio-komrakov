<?php
//Исходный многомерный массив
$array = [
    ['id' => 1, 'date' => "12.01.2020", 'name' => "test1"],
    ['id' => 2, 'date' => "02.05.2020", 'name' => "test2"],
    ['id' => 4, 'date' => "08.03.2020", 'name' => "test4"],
    ['id' => 1, 'date' => "22.01.2020", 'name' => "test1"],
    ['id' => 2, 'date' => "11.11.2020", 'name' => "test4"],
    ['id' => 3, 'date' => "06.06.2020", 'name' => "test3"],
];

//
//1. выделить уникальные записи (убрать дубли) в отдельный массив. в конечном массиве не должно быть элементов с одинаковым id.
//

function uniqueRecords($array) {
    // Используем функцию array_reduce для итерации по массиву и создания нового массива с уникальными значениями
    $uniqueArray = array_reduce($array, function($carry, $item) {
        // Проверяем есть ли элемент с таким же 'id' в массиве
        // Если нет, то сохраняем текущий элемент в $carry с ключом равным 'id'
        if (!isset($carry[$item['id']])) {
            $carry[$item['id']] = $item;
        }
        // Возвращаем измененный массив $carry
        return $carry;
    }, []);

    // Используем функцию array_values для удаления ключей и переиндексации результата
    return array_values($uniqueArray);
}

$uniqueArray = uniqueRecords($array);
print_r($uniqueArray);

//
//2. отсортировать многомерный массив по ключу (любому)
//

// Функция sortByKey принимает три параметра: массив для сортировки, ключ для сортировки и указание на направление сортировки (по умолчанию - по возрастанию)

function sortByKey($array, $key, $ascending = true) {

    // Задаем анонимную функцию для использования в качестве функции сравнения
    // Используем "use ($key, $ascending)" для доступа к внешним переменным
    
    $sortFunction = function($a, $b) use ($key, $ascending) {
    
        // Сравниваем значения по ключу в каждом элементе массива
        // Если значения равны, возвращаем 0, что означает, что элементы равны
        
        if ($a[$key] == $b[$key]) {
            return 0;
        }
        
        // Если значение первого элемента меньше значения второго, 
        // то результат сравнения равен -1, иначе равен 1
        
        $result = $a[$key] < $b[$key] ? -1 : 1;

        // Если сортировка должна быть по возрастанию, возвращаем результат сравнения.
        // В противном случае возвращаем отрицательное значение результата, что инвертирует порядок сортировки
        
        return $ascending ? $result : -$result;
    };

    // Используем функцию usort для сортировки массива с пользовательской функцией сравнения
    usort($array, $sortFunction);

    // Возвращаем отсортированный массив
    return $array;
}

// Сортировка по ключу 'id' в порядке возрастания
$sortedArray = sortByKey($array, 'id');
print_r($sortedArray);

// Сортировка по ключу 'date' в порядке убывания
$sortedArray = sortByKey($array, 'date', false);
print_r($sortedArray);

//     
//3. вернуть из массива только элементы, удовлетворяющие внешним условиям (например элементы с определенным id)
//

// Определяем функцию, которая будет фильтровать массив по заданному условию
function filterArrayById($array, string $key,string $value) {
    // Используем функцию array_filter для фильтрации элементов массива.
    // Она принимает в качестве первого параметра массив и возвращает новый массив со всеми элементами, для которых переданная в качестве второго параметра функция вернула true
    return array_filter($array, function($element) use ($key, $value) {
        // Если значение ключа 'id' элемента совпадает с заданным id, то вернуть true
        return $element[$key] == $value;
    });
}

// Фильтрация массива по заданному id
$resultArray = filterArrayById($array, 'id', '1');
print_r($resultArray);
     
//4. изменить в массиве значения и ключи (использовать name => id в качестве пары ключ => значение)

function restructureArray($array) {
    // Используем array_map() для создания нового массива с использованием функции, которая преобразует каждый элемент
    $newArray = array_map(function($element) {
        // Создаем новый ассоциативный массив с ключом 'name' и значением 'id'
        return ['key' => $element['name'], 'value' => $element['id']];
    }, $array);

    // Используем array_column() для извлечения новых ключей и значений из массива
    return array_column($newArray, 'value', 'key');
}

// Используем функцию для перестройки массива
$newArray = restructureArray($array);
print_r($newArray);